{"version":3,"sources":["api.jsx","chocobo.gif","chocobo-animation.jsx","App.jsx","index.jsx"],"names":["backendApi","axios","create","baseURL","window","location","hostname","env","BACKEND_PORT","timeout","getLatest24HoursAirQualityMeasurement","a","get","response","data","getLatest30DaysAirQualityMeasurement","getLatest365DaysAirQualityMeasurement","ChocoboAnimation","useState","resetAnimation","setResetAnimation","springProps","useSpring","delay","reset","transform","config","duration","from","onStart","onRest","setTimeout","Math","random","img","src","logo","alt","style","App","dayTrend","setDayTrend","monthTrend","setMonthTrend","yearTrend","setYearTrend","useEffect","then","measurements","intervalId","setInterval","clearInterval","renderLineChart","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tickMargin","YAxis","Tooltip","Legend","verticalAlign","Line","type","stroke","name","className","length","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6195ad2e.chunk.js","sourcesContent":["import axios from \"axios\";\nimport env from \"react-dotenv\";\n\nconst backendApi = axios.create({\n  baseURL: `http://${window.location.hostname}:${env.BACKEND_PORT}`,\n  timeout: 1000,\n});\n\nexport const getLatestAirQualityMeasurement = async () => {\n  const response = await backendApi.get(\"/measurements/latest\");\n  return response.data;\n};\n\nexport const getLatest24HoursAirQualityMeasurement = async () => {\n  const response = await backendApi.get(\"/measurements/latest/day\");\n  return response.data;\n};\n\n\nexport const getLatest30DaysAirQualityMeasurement = async () => {\n  const response = await backendApi.get(\"/measurements/latest/month\");\n  return response.data;\n};\n\n\nexport const getLatest365DaysAirQualityMeasurement = async () => {\n  const response = await backendApi.get(\"/measurements/latest/year\");\n  return response.data;\n};\n","export default __webpack_public_path__ + \"static/media/chocobo.840447c8.gif\";","import logo from \"./chocobo.gif\";\nimport { animated, useSpring } from \"react-spring\";\nimport { useState } from \"react\";\n\nexport const ChocoboAnimation = () => {\n  const [resetAnimation, setResetAnimation] = useState(false);\n\n  const springProps = useSpring({\n    delay: 1000,\n    reset: resetAnimation,\n    transform: \"translateX(-500px)\",\n    config: {\n      duration: 10000,\n    },\n    from: {\n      transform: \"translateX(2000px)\",\n    },\n    onStart: () => {\n      setResetAnimation(false);\n    },\n    onRest: () => {\n      setTimeout(() => setResetAnimation(true), Math.random() * 10000);\n    },\n  });\n\n  return <animated.img src={logo} alt=\"\" style={{ ...springProps }} />;\n};\n","import { useEffect, useState } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport \"./App.css\";\nimport {\n  getLatest24HoursAirQualityMeasurement,\n  getLatest365DaysAirQualityMeasurement,\n  getLatest30DaysAirQualityMeasurement,\n} from \"./api\";\nimport { ChocoboAnimation } from \"./chocobo-animation\";\n\nconst App = () => {\n  const [dayTrend, setDayTrend] = useState([]);\n  const [monthTrend, setMonthTrend] = useState([]);\n  const [yearTrend, setYearTrend] = useState([]);\n\n  const fetchData = () => {\n    getLatest24HoursAirQualityMeasurement().then((data) => {\n      setDayTrend(data.measurements);\n    });\n    getLatest30DaysAirQualityMeasurement().then((data) => {\n      setMonthTrend(data.measurements);\n    });\n    getLatest365DaysAirQualityMeasurement().then((data) => {\n      setYearTrend(data.measurements);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    const intervalId = setInterval(() => {\n      getLatest24HoursAirQualityMeasurement().then((data) => {\n        setDayTrend(data.measurements);\n      });\n    }, 60 * 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const renderLineChart = (data) => (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart width={500} height={300} data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"created_at\" tickMargin={10} />\n        <YAxis />\n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36} />\n        <Line type=\"monotone\" dataKey=\"pm2p5\" stroke=\"#8884d8\" name=\"PM 2.5\" />\n        <Line type=\"monotone\" dataKey=\"pm10\" stroke=\"#82ca9d\" name=\"PM 10\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  const renderDayTrend = () => (\n    <div className=\"mb-6 mr-3\">\n      <h2 className=\"title\" style={{ textAlign: \"center\" }}>\n        Daily trend\n      </h2>\n      <div style={{ height: \"20rem\" }}>{renderLineChart(dayTrend)}</div>\n    </div>\n  );\n\n  const renderMonthTrend = () => (\n    <div className=\"mb-6 mr-6\">\n      <h2 className=\"title\" style={{ textAlign: \"center\" }}>\n        Monthly trend\n      </h2>\n      <div style={{ height: \"20rem\" }}>{renderLineChart(monthTrend)}</div>\n    </div>\n  );\n\n  const renderYearTrend = () => (\n    <div className=\"mb-6 mr-6\">\n      <h2 className=\"title\" style={{ textAlign: \"center\" }}>\n        Yearly trend\n      </h2>\n      <div style={{ height: \"20rem\" }}>{renderLineChart(yearTrend)}</div>\n    </div>\n  );\n\n  return (\n    <div>\n      <ChocoboAnimation />\n      <div className=\"container is-max-widescreen mt-6\">\n        {dayTrend && dayTrend.length > 1 && renderDayTrend()}\n        {monthTrend && monthTrend.length > 1 && renderMonthTrend()}\n        {yearTrend && yearTrend.length > 1 && renderYearTrend()}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}